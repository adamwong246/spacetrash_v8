[
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/abstractClasses/0-WithSystem.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                256,
                259
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                256,
                259
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'now' is never reassigned. Use 'const' instead.",
        "line": 33,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 33,
        "endColumn": 14,
        "fix": {
          "range": [
            616,
            667
          ],
          "text": "const now = await new Promise(requestAnimationFrame);"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/abstractClasses/1-WithScenes.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 17,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/abstractClasses/2-WithTiled.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MapSize' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 17
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'l' is never reassigned. Use 'const' instead.",
        "line": 47,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 47,
        "endColumn": 17,
        "fix": {
          "range": [
            1578,
            1583
          ],
          "text": "const l"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'layerName' is defined but never used.",
        "line": 65,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 28
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'t' is never reassigned. Use 'const' instead.",
        "line": 88,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 88,
        "endColumn": 15,
        "fix": {
          "range": [
            2378,
            2383
          ],
          "text": "const t"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 149,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 234,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 19
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'ndx' is never reassigned. Use 'const' instead.",
        "line": 243,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 243,
        "endColumn": 18,
        "fix": {
          "range": [
            6706,
            6725
          ],
          "text": "const [ndx, filename]"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'filename' is never reassigned. Use 'const' instead.",
        "line": 243,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 243,
        "endColumn": 28,
        "fix": {
          "range": [
            6706,
            6725
          ],
          "text": "const [ndx, filename]"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 4,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/ecs/Component.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'IMove' is defined but never used.",
        "line": 1,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'IComponents' is defined but never used.",
        "line": 1,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 51
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/ecs/ECS.ts",
    "messages": [
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 1,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 1,
        "endColumn": 40,
        "fix": {
          "range": [
            0,
            3
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 1,
        "column": 18,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 1,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                448,
                451
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                448,
                451
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                744,
                747
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                744,
                747
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                749,
                752
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                749,
                752
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                819,
                822
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                819,
                822
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1058,
                1061
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1058,
                1061
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1063,
                1066
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1063,
                1066
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1878,
                1881
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1878,
                1881
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1883,
                1886
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1883,
                1886
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/ecs/EntityComponent.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                159,
                162
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                159,
                162
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                164,
                167
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                164,
                167
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                225,
                228
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                225,
                228
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                230,
                233
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                230,
                233
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                335,
                338
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                335,
                338
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                340,
                343
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                340,
                343
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/ecs/Store.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                139,
                142
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                139,
                142
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                257,
                260
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                257,
                260
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                366,
                369
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                366,
                369
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                424,
                427
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                424,
                427
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                536,
                539
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                536,
                539
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                541,
                544
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                541,
                544
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'eid' is never reassigned. Use 'const' instead.",
        "line": 27,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 27,
        "endColumn": 18,
        "fix": {
          "range": [
            660,
            673
          ],
          "text": "const [eid, ic]"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'ic' is never reassigned. Use 'const' instead.",
        "line": 27,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 27,
        "endColumn": 22,
        "fix": {
          "range": [
            660,
            673
          ],
          "text": "const [eid, ic]"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'eid' is never reassigned. Use 'const' instead.",
        "line": 33,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 33,
        "endColumn": 18,
        "fix": {
          "range": [
            767,
            780
          ],
          "text": "const [eid, ic]"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'eid' is assigned a value but never used.",
        "line": 33,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 18
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'ic' is never reassigned. Use 'const' instead.",
        "line": 33,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 33,
        "endColumn": 22,
        "fix": {
          "range": [
            767,
            780
          ],
          "text": "const [eid, ic]"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 113,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 113,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 113,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2203,
                2206
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2203,
                2206
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cb' is defined but never used.",
        "line": 134,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 134,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 134,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 134,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2888,
                2891
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2888,
                2891
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cb' is defined but never used.",
        "line": 137,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 137,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 17,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 4,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/game/Scene.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                118,
                121
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                118,
                121
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                216,
                219
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                216,
                219
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                231,
                234
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                231,
                234
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                254,
                257
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                254,
                257
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                510,
                513
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                510,
                513
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                601,
                604
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                601,
                604
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                788,
                791
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                788,
                791
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                793,
                796
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                826,
                829
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                826,
                829
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                831,
                834
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                831,
                834
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                863,
                866
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                863,
                866
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                868,
                871
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                868,
                871
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                893,
                896
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                893,
                896
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                951,
                954
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                951,
                954
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                956,
                959
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                956,
                959
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                997,
                1000
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                997,
                1000
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 16,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/game/StateSpace.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ECS' is defined but never used.",
        "line": 41,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/game/Tree.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'GraphologyDirectedGraph' is defined but never used.",
        "line": 1,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'DirectedGraph' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/game/physical.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                198,
                201
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                198,
                201
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 23,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 26,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 48,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 51,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1739,
                1742
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1739,
                1742
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 6,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1751,
                1754
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1751,
                1754
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1774,
                1777
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1774,
                1777
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2877,
                2880
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2877,
                2880
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 158,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 158,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3419,
                3422
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3419,
                3422
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 158,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 158,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3428,
                3431
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3428,
                3431
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'d' is defined but never used.",
        "line": 183,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'v' is defined but never used.",
        "line": 183,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 26
      },
      {
        "ruleId": "no-self-assign",
        "severity": 2,
        "message": "'this.d' is assigned to itself.",
        "line": 185,
        "column": 14,
        "nodeType": "MemberExpression",
        "messageId": "selfAssignment",
        "endLine": 185,
        "endColumn": 20
      },
      {
        "ruleId": "no-self-assign",
        "severity": 2,
        "message": "'this.v' is assigned to itself.",
        "line": 186,
        "column": 14,
        "nodeType": "MemberExpression",
        "messageId": "selfAssignment",
        "endLine": 186,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 15,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/physics/SP_Physical.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                282,
                285
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                282,
                285
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                287,
                290
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                287,
                290
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'av' is never reassigned. Use 'const' instead.",
        "line": 10,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 10,
        "endColumn": 11,
        "fix": {
          "range": [
            370,
            392
          ],
          "text": "const av = a.body.angle;"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'bv' is never reassigned. Use 'const' instead.",
        "line": 11,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 11,
        "endColumn": 11,
        "fix": {
          "range": [
            397,
            419
          ],
          "text": "const bv = b.body.angle;"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'bv' is assigned a value but never used.",
        "line": 11,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 11
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'temp' is never reassigned. Use 'const' instead.",
        "line": 12,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 12,
        "endColumn": 13,
        "fix": {
          "range": [
            424,
            438
          ],
          "text": "const temp = av;"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/physics/SP_Polygon.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                635,
                638
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                635,
                638
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                643,
                646
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                643,
                646
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/physics/SamuraIEngine.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'render' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'polyPart' is assigned a value but never used.",
        "line": 3,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 3,
        "column": 18,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 3,
        "endColumn": 43
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 4,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 4,
        "endColumn": 44,
        "fix": {
          "range": [
            89,
            92
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'centroid' is assigned a value but never used.",
        "line": 4,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 4,
        "column": 16,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 4,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'intersectLineLine' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'polygonInPolygon' is defined but never used.",
        "line": 6,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'THREE' is defined but never used.",
        "line": 8,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'SAT' is defined but never used.",
        "line": 9,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 16
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 11,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 11,
        "endColumn": 36,
        "fix": {
          "range": [
            269,
            272
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'area' is assigned a value but never used.",
        "line": 11,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 11,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 11,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Polygon' is defined but never used.",
        "line": 13,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'drawPolygon' is defined but never used.",
        "line": 13,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TileSize' is defined but never used.",
        "line": 16,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1145,
                1148
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1145,
                1148
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ps' is assigned a value but never used.",
        "line": 136,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/demiurge/rendering/RenderableComponent.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 3,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                229,
                232
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                229,
                232
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v1/casting/in.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1125,
                1128
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1125,
                1128
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v1/casting/out.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'intensity' is defined but never used.",
        "line": 46,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v1/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                463,
                466
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                463,
                466
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v2/eid2PMC.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                264,
                267
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                264,
                267
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'eid' is defined but never used.",
        "line": 17,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'eid' is defined but never used.",
        "line": 21,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'classification' is assigned a value but never used.",
        "line": 28,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'classification' is assigned a value but never used.",
        "line": 33,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v3/actors.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'IBehaviors' is defined but never used.",
        "line": 9,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 8,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                687,
                690
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                687,
                690
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'toReturn' is never reassigned. Use 'const' instead.",
        "line": 40,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 40,
        "endColumn": 27,
        "fix": {
          "range": [
            1064,
            1092
          ],
          "text": "const toReturn: number[] = [];"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v3/ai.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ActorComponent' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'SetPieceStore' is defined but never used.",
        "line": 7,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AttackPatterns' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ExplorePatterns' is defined but never used.",
        "line": 10,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'randomSpeed' is assigned a value but never used.",
        "line": 44,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 115,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 115,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3259,
                3262
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3259,
                3262
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 115,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 115,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                3264,
                3267
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                3264,
                3267
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'delta' is defined but never used.",
        "line": 210,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 210,
        "endColumn": 31
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 257,
        "column": 5,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 257,
        "endColumn": 59,
        "fix": {
          "range": [
            7138,
            7141
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 275,
        "column": 13,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 275,
        "endColumn": 55
      },
      {
        "ruleId": "no-debugger",
        "severity": 2,
        "message": "Unexpected 'debugger' statement.",
        "line": 306,
        "column": 13,
        "nodeType": "DebuggerStatement",
        "messageId": "unexpected",
        "endLine": 306,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'actors' is defined but never used.",
        "line": 314,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 314,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setPiece' is defined but never used.",
        "line": 315,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 315,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 316,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 316,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 317,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 317,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'manhattenDistance' is defined but never used.",
        "line": 318,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 318,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'visibility' is defined but never used.",
        "line": 319,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 319,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 385,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 385,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                10590,
                10593
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                10590,
                10593
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'position' is defined but never used.",
        "line": 398,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 398,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 19,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v3/attack.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                382,
                385
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                382,
                385
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                387,
                390
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                387,
                390
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 21,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'b' is defined but never used.",
        "line": 21,
        "column": 50,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'b' is defined but never used.",
        "line": 22,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 14
      },
      {
        "ruleId": "no-debugger",
        "severity": 2,
        "message": "Unexpected 'debugger' statement.",
        "line": 23,
        "column": 7,
        "nodeType": "DebuggerStatement",
        "messageId": "unexpected",
        "endLine": 23,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/Components/v3/setPieces.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'PIXI' is defined but never used.",
        "line": 2,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/EntityComponents/bots/PuckBot.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'redMaterial' is assigned a value but never used.",
        "line": 14,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'image' is defined but never used.",
        "line": 20,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'textures' is defined but never used.",
        "line": 21,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/EntityComponents/bots/TankBot.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Box' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is assigned a value but never used.",
        "line": 28,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'dx' is assigned a value but never used.",
        "line": 29,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'dy' is assigned a value but never used.",
        "line": 30,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1244,
                1247
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1244,
                1247
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1249,
                1252
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1249,
                1252
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/EntityComponents/bots/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'degToRad' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/ECS/EntityComponents/tiles/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'SP_MultiPolygon' is defined but never used.",
        "line": 20,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1499,
                1502
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1499,
                1502
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1504,
                1507
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1504,
                1507
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2155,
                2158
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2155,
                2158
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2160,
                2163
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2160,
                2163
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'images' is defined but never used.",
        "line": 138,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'textures' is defined but never used.",
        "line": 139,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'images' is defined but never used.",
        "line": 172,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'textures' is defined but never used.",
        "line": 173,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'images' is defined but never used.",
        "line": 212,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 212,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'textures' is defined but never used.",
        "line": 213,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 213,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'images' is defined but never used.",
        "line": 287,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 287,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'textures' is defined but never used.",
        "line": 288,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 288,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/Scenes/Boot.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 11,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 14,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/Scenes/MainLoop.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                415,
                418
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                415,
                418
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                420,
                423
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                420,
                423
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'n' is defined but never used.",
        "line": 13,
        "column": 45,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'n' is defined but never used.",
        "line": 42,
        "column": 49,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 183,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 187,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 187,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 191,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 207,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 207,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 207,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 207,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 212,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 212,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 212,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 212,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 215,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'events' is defined but never used.",
        "line": 215,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 219,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 219,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 222,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 222,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 225,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 225,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'events' is defined but never used.",
        "line": 225,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 225,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 230,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 230,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ctx' is defined but never used.",
        "line": 231,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 231,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 234,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 234,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 242,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 242,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 242,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 242,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                5915,
                5918
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                5915,
                5918
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 267,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 267,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 270,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 270,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 270,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 270,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6557,
                6560
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6557,
                6560
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 275,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 275,
        "endColumn": 41,
        "fix": {
          "range": [
            6615,
            6618
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 276,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 276,
        "endColumn": 43,
        "fix": {
          "range": [
            6656,
            6659
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 277,
        "column": 9,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 277,
        "endColumn": 42,
        "fix": {
          "range": [
            6699,
            6702
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 287,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 287,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 287,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 287,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ctx' is defined but never used.",
        "line": 288,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 288,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 291,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 291,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 291,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 291,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 300,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 300,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                7112,
                7115
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                7112,
                7115
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 324,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 324,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 324,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 324,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 327,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 327,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 327,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 327,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 334,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 334,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 334,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 334,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 334,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 334,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                7761,
                7764
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                7761,
                7764
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 347,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 347,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 347,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 347,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 350,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 350,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 350,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 350,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 354,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 354,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'events' is defined but never used.",
        "line": 354,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 354,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 361,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 361,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 361,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 361,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 364,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 364,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 364,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 364,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 371,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 371,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 371,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 371,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 371,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 371,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                8562,
                8565
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                8562,
                8565
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 384,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 384,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 384,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 384,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 387,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 387,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 387,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 387,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 394,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 394,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 394,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 394,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 394,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 394,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                9072,
                9075
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                9072,
                9075
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 407,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 407,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 407,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 407,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 410,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 410,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 410,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 410,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 417,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 417,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 417,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 417,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 417,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 417,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                9571,
                9574
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                9571,
                9574
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 430,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 430,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 433,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 433,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'reply' is defined but never used.",
        "line": 433,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 433,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'game' is defined but never used.",
        "line": 435,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 435,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ecs' is defined but never used.",
        "line": 440,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 440,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'event' is defined but never used.",
        "line": 440,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 440,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 440,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 440,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                10078,
                10081
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                10078,
                10081
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 83,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/Scenes/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                168,
                171
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                168,
                171
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                266,
                269
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                266,
                269
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                281,
                284
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                281,
                284
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                304,
                307
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                304,
                307
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'IAppLogic' is defined but never used.",
        "line": 15,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/UI/ArcadePhysicsWindow.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MapSize' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TileSize' is defined but never used.",
        "line": 4,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/UI/CustomPhysicsWindow.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'level4' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MapSize' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TileSize' is defined but never used.",
        "line": 5,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/0-multisurface.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 5,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                513,
                516
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                513,
                516
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                599,
                602
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                599,
                602
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                807,
                810
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                807,
                810
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 53,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 54,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1692,
                1695
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1692,
                1695
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1917,
                1920
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1917,
                1920
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 72,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 72,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1937,
                1940
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1937,
                1940
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1958,
                1961
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1958,
                1961
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/1-DesktopGame.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1612,
                1615
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1612,
                1615
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1617,
                1620
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1617,
                1620
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1860,
                1863
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1860,
                1863
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                1978,
                1981
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                1978,
                1981
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2012,
                2015
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2012,
                2015
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2144,
                2147
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2144,
                2147
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2830,
                2833
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2830,
                2833
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 126,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 126,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 202,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 202,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6107,
                6110
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6107,
                6110
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 210,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 210,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 210,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 210,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6303,
                6306
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6303,
                6306
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 214,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 214,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6429,
                6432
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6429,
                6432
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 217,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 217,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 217,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 217,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6555,
                6558
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6555,
                6558
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 220,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 220,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 220,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6687,
                6690
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6687,
                6690
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 223,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 223,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 223,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 223,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                6824,
                6827
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                6824,
                6827
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                7481,
                7484
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                7481,
                7484
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 275,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 275,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                8320,
                8323
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                8320,
                8323
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-empty",
        "severity": 2,
        "message": "Empty block statement.",
        "line": 406,
        "column": 12,
        "nodeType": "BlockStatement",
        "messageId": "unexpected",
        "endLine": 408,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestComment",
            "data": {
              "type": "block"
            },
            "fix": {
              "range": [
                11985,
                11991
              ],
              "text": " /* empty */ "
            },
            "desc": "Add comment inside empty block statement."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 415,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 415,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 434,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 434,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 438,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 438,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 442,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 442,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 446,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 446,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 577,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 577,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 602,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 602,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                16440,
                16443
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                16440,
                16443
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 603,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 603,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                16460,
                16463
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                16460,
                16463
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'unitX' is assigned a value but never used.",
        "line": 878,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 878,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'unitY' is assigned a value but never used.",
        "line": 879,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 879,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'degrees' is assigned a value but never used.",
        "line": 881,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 881,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 34,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/2-WithAssets.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 3,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 6,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                682,
                685
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                682,
                685
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 29,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'assets' is defined but never used.",
        "line": 96,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/4-WithControls.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                385,
                388
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                385,
                388
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 22,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 22,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/7-WithLoad.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                370,
                373
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                370,
                373
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                402,
                405
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                402,
                405
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'delta' is defined but never used.",
        "line": 21,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'tr' is defined but never used.",
        "line": 119,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'utils' is defined but never used.",
        "line": 119,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'tr' is defined but never used.",
        "line": 122,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'pm' is defined but never used.",
        "line": 122,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Check' is defined but never used.",
        "line": 157,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 157,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/7-WithLoad.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 4,
        "column": 18,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 4,
        "endColumn": 43
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 5,
        "column": 1,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 5,
        "endColumn": 44,
        "fix": {
          "range": [
            184,
            187
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 5,
        "column": 16,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 5,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2004,
                2007
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2004,
                2007
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                2029,
                2032
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                2029,
                2032
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'pxs' is assigned a value but never used.",
        "line": 122,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 14
      },
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 169,
        "column": 11,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 169,
        "endColumn": 45,
        "fix": {
          "range": [
            4739,
            4742
          ],
          "text": "let"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'response' is assigned a value but never used.",
        "line": 169,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 23
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'eid' is never reassigned. Use 'const' instead.",
        "line": 383,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 383,
        "endColumn": 18,
        "fix": {
          "range": [
            12828,
            12864
          ],
          "text": "const [eid, [subtype, classification]]"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'subtype' is never reassigned. Use 'const' instead.",
        "line": 383,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 383,
        "endColumn": 28,
        "fix": {
          "range": [
            12828,
            12864
          ],
          "text": "const [eid, [subtype, classification]]"
        }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'classification' is never reassigned. Use 'const' instead.",
        "line": 383,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 383,
        "endColumn": 44,
        "fix": {
          "range": [
            12828,
            12864
          ],
          "text": "const [eid, [subtype, classification]]"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'position' is assigned a value but never used.",
        "line": 730,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 730,
        "endColumn": 21
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'mesh' is never reassigned. Use 'const' instead.",
        "line": 732,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 732,
        "endColumn": 20,
        "fix": {
          "range": [
            22319,
            22327
          ],
          "text": "const mesh"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 6,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/Terminal.ts",
    "messages": [
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\~.",
        "line": 129,
        "column": 1,
        "nodeType": "TemplateElement",
        "messageId": "unnecessaryEscape",
        "endLine": 129,
        "endColumn": 2,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": {
              "range": [
                3991,
                3992
              ],
              "text": ""
            },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": {
              "range": [
                3991,
                3991
              ],
              "text": "\\"
            },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/game/navmesh.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'doSegmentsOverlap' is defined but never used.",
        "line": 141,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/lib.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'generateRandomHexColor' is defined but never used.",
        "line": 3,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'SetPieceComponent' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'colors' is never reassigned. Use 'const' instead.",
        "line": 11,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 11,
        "endColumn": 11,
        "fix": {
          "range": [
            311,
            509
          ],
          "text": "const colors = [\n    \"#0000FF\",  // Blue\n    \"#1A00E5\",\n    \"#3300CC\",\n    \"#4D00B2\",\n    \"#660099\",\n    \"#800080\",\n    \"#990066\",\n    \"#B2004D\",\n    \"#CC0033\",\n    \"#E5001A\",\n    \"#FF0000\"   // Red\n]"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/physics/BasePolygon.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": {
              "range": [
                182,
                185
              ],
              "text": "unknown"
            },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": {
              "range": [
                182,
                185
              ],
              "text": "never"
            },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adam/Code/spacetrash_v8/src/spacetrash/physics/SamuraiTile.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'x' is defined but never used.",
        "line": 17,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'y' is defined but never used.",
        "line": 20,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]